//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iChat.Client.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="iChat", ConfigurationName="ServiceReference.IChatContracts", CallbackContract=typeof(iChat.Client.ServiceReference.IChatContractsCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatContracts {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="iChat/IChatContracts/StartSession")]
        void StartSession(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="iChat/IChatContracts/StartSession")]
        System.Threading.Tasks.Task StartSessionAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="iChat/IChatContracts/StopSession")]
        void StopSession();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="iChat/IChatContracts/StopSession")]
        System.Threading.Tasks.Task StopSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="iChat/IChatContracts/SendMessage")]
        void SendMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="iChat/IChatContracts/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatContractsCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="iChat/IChatContracts/UserConnected")]
        void UserConnected(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="iChat/IChatContracts/UserDisconnected")]
        void UserDisconnected(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="iChat/IChatContracts/MessageReceived")]
        void MessageReceived(string pseudo, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatContractsChannel : iChat.Client.ServiceReference.IChatContracts, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatContractsClient : System.ServiceModel.DuplexClientBase<iChat.Client.ServiceReference.IChatContracts>, iChat.Client.ServiceReference.IChatContracts {
        
        public ChatContractsClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatContractsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatContractsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatContractsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatContractsClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void StartSession(string name) {
            base.Channel.StartSession(name);
        }
        
        public System.Threading.Tasks.Task StartSessionAsync(string name) {
            return base.Channel.StartSessionAsync(name);
        }
        
        public void StopSession() {
            base.Channel.StopSession();
        }
        
        public System.Threading.Tasks.Task StopSessionAsync() {
            return base.Channel.StopSessionAsync();
        }
        
        public void SendMessage(string message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message) {
            return base.Channel.SendMessageAsync(message);
        }
    }
}
